name: BuildAndReleaseMaster
on: [workflow_dispatch]
# on:
#   push:
#     tags:
#       - "*"

jobs:
  build_release_arm64:
    name: Build release ARM64
    # needs: create_release
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      # - uses: actions/checkout@v3
      # - name: install node
      #   uses: actions/setup-node@master
      #   with:
      #     node-version: '20.x'
      #     architecture: 'arm64'
      # - name: install rust
      #   uses: hecrj/setup-rust-action@v1
      #   with:
      #     rust-version: stable
      # - uses: jetli/wasm-pack-action@v0.4.0
      #   with:
      #     version: 'latest'
      - uses: uraimo/run-on-arch-action@v2
        name: Run commands
        id: runcmd
        with:
          arch: aarch64
          distro: ubuntu_latest
          githubToken: ${{ github.token }}
          install: |
            export DOCKER_DEFAULT_PLATFORM=linux/arm64
            apt update && apt install -y sudo
            sudo apt install -y libudev-dev pkg-config chromium-browser
            sudo apt-get update && DEBIAN_FRONTEND=noninteractive TZ=Etc/UTC apt-get -y install tzdata
            sudo apt-get install -y -f git npm curl autoconf bison build-essential libyaml-dev libreadline6-dev zlib1g-dev libncurses5-dev libffi-dev libgdbm6 libgdbm-dev libdb-dev
            sudo apt-get install -y ruby-full
            npm install --global yarn
            yarn config set ignore-engines true
            sudo apt-get update
            sudo apt-get install -y -f ca-certificates curl gnupg
            cd /etc/apt/sources.list.d
            sudo apt --fix-broken install
            sudo apt update
            sudo apt remove nodejs -y
            sudo apt remove nodejs-doc -y
            curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -
            sudo apt-get install -y nodejs
            # sudo mkdir -p /etc/apt/keyrings
            # curl -fsSL https://deb.nodesource.com/gpgkey/nodesource-repo.gpg.key | sudo gpg --dearmor -o /etc/apt/keyrings/nodesource.gpg
            # echo "deb [signed-by=/etc/apt/keyrings/nodesource.gpg] https://deb.nodesource.com/node_20.x nodistro main" | sudo tee /etc/apt/sources.list.d/nodesource.list
            # sudo apt-get update
            # sudo apt-get install nodejs -y -f
            curl --proto '=https' --tlsv1.3 -sSf https://sh.rustup.rs | sh -s -- -y
            source "$HOME/.cargo/env"
            rustup -V
            pwd
            cd ~
            git clone https://github.com/itsmesamster/chipmunk.git
            cd chipmunk
            pwd
            gem install dotenv
            gem install json
            cargo install nj-cli
            npm install npm-update-all -g
            cd ~/chipmunk/application/holder
            rake release:prod --trace
          run: |
            ls
      - name: list release files
        run: ls
  # create_release:
  #   name: Create release
  #   runs-on: ubuntu-latest
  #   outputs:
  #     upload_url: ${{ steps.create_release.outputs.upload_url }}
  #   env:
  #     PUBLISH_FOR_PULL_REQUEST: true
  #     CSC_FOR_PULL_REQUEST: true
  #   steps:
  #     - name: Release
  #       if: startsWith(github.ref, 'refs/tags/')
  #       id: create_release
  #       uses: softprops/action-gh-release@v1
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       with:
  #         prerelease: true
  #         tag_name: ${{ github.ref_name }}
  #         name: ${{ github.ref_name }}
  # build_release:
  #   name: Build release
  #   # needs: create_release
  #   runs-on: ${{ matrix.os }}
  #   env:
  #     PUBLISH_FOR_PULL_REQUEST: 1
  #     CSC_FOR_PULL_REQUEST: true
  #   strategy:
  #     matrix:
  #       os: [ubuntu-20.04, windows-latest, macOS-latest]
  #       # arch: [aarch64, none]
  #       rust: [stable]
  #       # exclude:
  #       #   - os: windows-latest
  #       #     arch: aarch64
  #       #   - os: macOS-latest
  #       #     arch: aarch64
  #   steps:
  #     # - uses: uraimo/run-on-arch-action@v2
  #     #   if: matrix.os=='ubuntu-20.04' && matrix.arch == 'aarch64'
  #     #   with:
  #     #     arch: aarch64
  #     #     distro: ubuntu_latest
  #     #     githubToken: ${{ github.token }}
  #     #     run: |
  #     #       uname -a
  #     #       echo ::set-output name=uname::$(uname -a)
  #     - name: Checkout
  #       uses: actions/checkout@v3
  #     - name: libudev-dev
  #       if: runner.os == 'Linux'
  #       run: sudo apt-get install -y libudev-dev
  #     - name: install ruby
  #       uses: ruby/setup-ruby@v1
  #       with:
  #         ruby-version: "3.0"
  #         bundler-cache: true
  #     - name: install ruby:gem::dotenv
  #       run: gem install dotenv
  #     - name: install ruby:gem::json
  #       run: gem install json
  #     - name: install node
  #       uses: actions/setup-node@master
  #       with:
  #         node-version: "current"
  #     - name: install rust
  #       uses: hecrj/setup-rust-action@v1
  #       with:
  #         rust-version: ${{ matrix.rust }}
  #     - name: cargo install nj-cli
  #       run: cargo install nj-cli
  #     - name: install wasm-pack
  #       run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh
  #     - name: setup keychain for signing and notarising
  #       if: runner.os == 'macOS'
  #       env:
  #         KEYCHAIN_NAME: "build.keychain"
  #         CSC_LINK: ${{ secrets.CSC_LINK }}
  #         CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}
  #         KEYCHAIN_PWD: ${{ secrets.KEYCHAIN_PWD }}
  #       run: |
  #         security create-keychain -p "$KEYCHAIN_PWD" "$KEYCHAIN_NAME"
  #         security default-keychain -s "$KEYCHAIN_NAME"
  #         certfile="${HOME}/buildcert.p12"
  #         echo "$CSC_LINK" | base64 -d > "$certfile"
  #         security import \
  #           "$certfile" \
  #           -P "$CSC_KEY_PASSWORD" \
  #           -A \
  #           -k "$KEYCHAIN_NAME"
  #         rm "$certfile"
  #         security set-key-partition-list \
  #           -S 'apple:' \
  #           -s \
  #           -k "$KEYCHAIN_PWD" \
  #           "$KEYCHAIN_NAME"
  #     # - uses: uraimo/run-on-arch-action@v2
  #     #   name: build release arm64
  #     #   if: matrix.os=='ubuntu-20.04' && matrix.arch == 'aarch64'
  #     #   with:
  #     #     arch: aarch64
  #     #     distro: ubuntu_latest
  #     #     githubToken: ${{ github.token }}
  #     #     run: |
  #     #       uname -a
  #     #       cd ./application/holder
  #     #       rake release:prod --trace
  #     #   env:
  #     #     KEYCHAIN_NAME: "build.keychain"
  #     #     CSC_LINK: ${{ secrets.CSC_LINK }}
  #     #     CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}
  #     #     APPLEID: ${{ secrets.APPLEID }}
  #     #     APPLEIDPASS: ${{ secrets.APPLEIDPASS }}
  #     #     TEAMID: ${{ secrets.TEAMID }}
  #     #     SIGNING_ID: ${{ secrets.SIGNING_ID }}
  #     #     KEYCHAIN_PWD: ${{ secrets.KEYCHAIN_PWD }}
  #     #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #     - name: build release
  #       working-directory: ./application/holder
  #       # if: matrix.arch != 'aarch64'
  #       run: rake release:prod --trace
  #       env:
  #         KEYCHAIN_NAME: "build.keychain"
  #         CSC_LINK: ${{ secrets.CSC_LINK }}
  #         CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}
  #         APPLEID: ${{ secrets.APPLEID }}
  #         APPLEIDPASS: ${{ secrets.APPLEIDPASS }}
  #         TEAMID: ${{ secrets.TEAMID }}
  #         SIGNING_ID: ${{ secrets.SIGNING_ID }}
  #         KEYCHAIN_PWD: ${{ secrets.KEYCHAIN_PWD }}
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #     - name: list release files
  #       working-directory: ./application/holder/release
  #       run: ls
      # - name: upload files
      #   if: startsWith(github.ref, 'refs/tags/')
      #   uses: AButler/upload-release-assets@v2.0
      #   with:
      #     files: "./application/holder/release/*.tgz;./application/holder/release/*.zip"
      #     repo-token: ${{ secrets.GITHUB_TOKEN }}
      #     release-tag: ${{ github.ref_name }}
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  # build_release_arm64:
  #   name: Build release ARM64
  #   # needs: create_release
  #   runs-on: ubuntu-20.04
  #   steps:
  #     - uses: actions/checkout@v3
  #     # - name: install node
  #     #   uses: actions/setup-node@master
  #     #   with:
  #     #     node-version: "current"
  #     # - name: install rust
  #     #   uses: hecrj/setup-rust-action@v1
  #     #   with:
  #     #     rust-version: stable
  #     - uses: uraimo/run-on-arch-action@v2
  #       name: Run commands
  #       id: runcmd
  #       with:
  #         arch: aarch64
  #         distro: ubuntu20.04
  #         githubToken: ${{ github.token }}
  #         install: |
  #           apt update && apt install sudo
  #           sudo apt-get install -y git curl autoconf bison build-essential libssl-dev libyaml-dev libreadline6-dev zlib1g-dev libncurses5-dev libffi-dev libgdbm6 libgdbm-dev libdb-dev libudev-dev
  #           sudo apt-get update && DEBIAN_FRONTEND=noninteractive TZ=Etc/UTC apt-get -y install tzdata
  #           sudo apt-get install -y ruby-full
  #           sudo apt-get install -y nodejs
  #           curl --proto '=https' --tlsv1.3 https://sh.rustup.rs -sSf | sh -s -- -y
  #           source "$HOME/.cargo/env"
  #           gem install dotenv
  #           gem install json
  #           cargo install nj-cli
  #           cargo install wasm-pack
  #         run: |
  #           cd ./application/holder
  #           rake release:prod --trace
  #     - name: list release files
  #       working-directory: ./application/holder/release
  #       run: ls
  # build_release_test:
  #   name: Build release
  #   # needs: create_release
  #   runs-on: self-hosted
  #   env:
  #     PUBLISH_FOR_PULL_REQUEST: 1
  #     CSC_FOR_PULL_REQUEST: true
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v3
  #     - name: libudev-dev
  #       run: |
  #         sudo yum update -y
  #         sudo yum install -y curl gpg gcc gcc-c++ make libyaml-devel openssl-devel readline-devel zlib-devel libudev-devel ruby-devel
  #         sudo gpg --keyserver keyserver.ubuntu.com --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3 7D2BAF1CF37B13E2069D6956105BD0E739499BDB
  #         pwd
  #         sudo yum install -y ruby
  #     - name: install ruby:gem::dotenv
  #       run: sudo gem install dotenv
  #     - name: install ruby:gem::json
  #       run: sudo gem install json
  #     - name: install node
  #       uses: actions/setup-node@master
  #       with:
  #         node-version: 20.x
  #         architecture: 'arm64'
  #     - name: install rust
  #       uses: hecrj/setup-rust-action@v1
  #       with:
  #         rust-version: stable
  #     - name: cargo install nj-cli
  #       run: cargo install nj-cli
  #     - name: install wasm-pack
  #       run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh
  #     - name: lint and clean
  #       run: |
  #         rake clean
  #         rake lint:all
  #       env:
  #         KEYCHAIN_NAME: "build.keychain"
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #     - name: build release
  #       working-directory: ./application/holder
  #       run: |
  #         rake release:prod --trace
  #       env:
  #         KEYCHAIN_NAME: "build.keychain"
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #     - name: list release files
  #       working-directory: ./application/holder/release
  #       run: ls
      # - name: upload files
      #   if: startsWith(github.ref, 'refs/tags/')
      #   uses: AButler/upload-release-assets@v2.0
      #   with:
      #     files: "./application/holder/release/*.tgz;./application/holder/release/*.zip"
      #     repo-token: ${{ secrets.GITHUB_TOKEN }}
      #     release-tag: ${{ github.ref_name }}
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  # invoke_package_distribution:
  #   name: Invoke chipmunk package creation and distribution for different package managers
  #   needs: build_release
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout chipmunk-distribution
  #       uses: actions/checkout@v2
  #       with:
  #         repository: itsmesamster/chipmunk-distribution
  #         path: './chipmunk-distribution'
  #         token: ${{secrets.PUSH_TOKEN}}
  #     - name: Push tag
  #       working-directory: ./chipmunk-distribution
  #       run: |
  #         git config user.name "esrlabs"
  #         git config user.email "esrlabs@gmail.com"
  #         git remote set-url origin "https://esrlabs:${{secrets.PUSH_TOKEN}}@github.com/itsmesamster/chipmunk-distribution"
  #         git tag ${{ github.ref_name }}
  #         git push origin ${{ github.ref_name }}